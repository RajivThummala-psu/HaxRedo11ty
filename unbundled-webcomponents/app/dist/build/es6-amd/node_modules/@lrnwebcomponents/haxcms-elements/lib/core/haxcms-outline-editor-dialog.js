define(["exports","../../../../lit-element/lit-element.js","./haxcms-site-store.js","../../../../mobx/lib/mobx.module.js","../../../json-outline-schema/json-outline-schema.js","../../../editable-outline/editable-outline.js","../../../../@polymer/paper-button/paper-button.js","../../../../@polymer/iron-icon/iron-icon.js","../../../../@polymer/iron-icons/iron-icons.js"],(function(_exports,_litElement,_haxcmsSiteStore,_mobxModule,_jsonOutlineSchema,_editableOutline,_paperButton,_ironIcon,_ironIcons){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HAXCMSOutlineEditorDialog=void 0;class HAXCMSOutlineEditorDialog extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          display: block;
          height: 60vh;
          min-width: 50vw;
        }
        .buttons {
          position: absolute;
          bottom: 0;
          z-index: 1000000;
          background-color: var(--simple-modal-titlebar-background, #000000);
          color: var(--simple-modal-titlebar-color, #ffffff);
          left: 0;
          right: 0;
        }
        .buttons paper-button {
          color: #ffffff;
          background-color: var(--simple-modal-button-background, #000000);
        }
        editable-outline:not(:defined),
        paper-button:not(:defined) {
          display: none;
        }
        #toggle {
          float: right;
          text-transform: unset;
        }
        #savebtn {
          color: white;
          background-color: var(--haxcms-color, #2196f3);
        }
        editable-outline {
          margin-bottom: 32px;
        }
      `]}static get tag(){return"haxcms-outline-editor-dialog"}render(){return _litElement.html`
      <editable-outline
        id="outline"
        edit-mode
        .hidden="${this.viewMode}"
        .items="${this.manifestItems}"
      ></editable-outline>
      <div class="buttons">
        <paper-button id="savebtn" dialog-confirm @click="${this._saveTap}"
          ><iron-icon icon="icons:save"></iron-icon>Save</paper-button
        >
        <paper-button dialog-dismiss
          ><iron-icon icon="icons:cancel"></iron-icon>Cancel</paper-button
        >
      </div>
    `}constructor(){super(),this.__disposer=[],this.viewMode=!1}static get properties(){return{opened:{type:Boolean},manifestItems:{type:Array},manifestItemsStatic:{type:String,attribute:"manifest-items-static"},viewLabel:{type:String,attribute:"view-label"},viewMode:{type:Boolean,attribute:"view-mode"}}}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"opened"==propName&&this.dispatchEvent(new CustomEvent("opened-changed",{detail:this[propName]})),"manifestItems"==propName&&(this._manifestItemsChanged(this[propName],oldValue),this.dispatchEvent(new CustomEvent("manifest-edit-mode-changed",{detail:this[propName]})))})}_manifestItemsChanged(newValue){newValue&&(window.JSONOutlineSchema.requestAvailability().items=newValue,this.manifestItemsStatic=JSON.stringify(newValue,null,2))}firstUpdated(){this.shadowRoot.querySelector("#outline").importJsonOutlineSchemaItems()}connectedCallback(){super.connectedCallback(),(0,_mobxModule.autorun)(reaction=>{this.manifestItems=[...(0,_mobxModule.toJS)(_haxcmsSiteStore.store.manifest.items)],this.__disposer.push(reaction)})}disconnectedCallback(){for(var i in this.__disposer)this.__disposer[i].dispose();super.disconnectedCallback()}_saveTap(e){window.dispatchEvent(new CustomEvent("haxcms-save-outline",{bubbles:!0,composed:!0,detail:this.shadowRoot.querySelector("#outline").exportJsonOutlineSchemaItems(!0)}))}}_exports.HAXCMSOutlineEditorDialog=HAXCMSOutlineEditorDialog,window.customElements.define(HAXCMSOutlineEditorDialog.tag,HAXCMSOutlineEditorDialog)}));